//Imports
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');


// Gaining access to the user model class (collection)
// Having one argument for .model() means we are fetching data from that collection
const User = mongoose.model('users');

// Generates the unique identifying piece of information that identifies the user and is 
// stored in the cookie.
passport.serializeUser((user, done) => {
  // "user.id" is the identifying piece of information that we stor in the cookie
  // (this is a refernece to the "_id" stored in MongoDB)
  done(null, user.id);
});

// Converts the serialized back into a usable user object (the deserialized user).
// Uses the cookie generated by the serialized user.
// Takes user id and turns it into a user
passport.deserializeUser((id, done) => {
  User.findById(id)
    .then(user => {
      done(null, user);
    });
});

// Configuration for Google authentication
passport.use(new GoogleStrategy(
  {
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback',
    proxy: true
  },
  // Recieves the tokens and profile object for the user after /auth/google/callback route.
  // Creates and saves new User collection instance for the specific user to the users collection.
  // Also checks to see if the user already exists when logging in.
  async (accessToken, refreshToken, profile, done) => {
    const existingUser = await User.findOne({ googleId: profile.id })
    // User's google ID already exists in database
    if (existingUser) {
      return done(null, existingUser);
    }
    // User's google ID does NOT exist in the database so make a new entry in the database for that user
    const user = await new User({ googleId: profile.id }).save()
    done(null, user);
  })
);
